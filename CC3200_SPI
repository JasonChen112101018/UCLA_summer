#include <SPI.h>
#include <WiFi.h>

// ===== SPI Pin Definitions =====
#define SPI_CS_PIN 6  // GPIO06 = PIN_08 on CC3200

// ===== Default LEDs =====
#define RED_LED    RED_LED
#define GREEN_LED  GREEN_LED

// ===== WiFi Access Point Settings =====
const char ssid[] = "MyEnergiaAP";
const char password[] = "password";

// ===== TCP Server Setup =====
WiFiServer tcpServer(8080);
WiFiClient tcpClient;

// ===== Communication Constants =====
#define STX 0x02
#define ETX 0x03

// ===== Buffers and Flags =====
String tcpBuffer = "";
bool receivingTCP = false;

unsigned long lastBlinkTime = 0;
int currentLED = 0;
const unsigned long blinkInterval = 500;

void setup() {
  Serial.begin(115200);

  // LED Setup
  pinMode(RED_LED, OUTPUT);
  pinMode(GREEN_LED, OUTPUT);
  digitalWrite(RED_LED, LOW);
  digitalWrite(GREEN_LED, LOW);

  // SPI Setup
  SPI.begin();
  SPI.setClockDivider(SPI_CLOCK_DIV2); // ~4 MHz
  SPI.setBitOrder(MSBFIRST);
  SPI.setDataMode(SPI_MODE0);
  pinMode(SPI_CS_PIN, OUTPUT);
  digitalWrite(SPI_CS_PIN, HIGH); // Deselect C2000

  // WiFi Setup
  Serial.print("Setting up Access Point: ");
  Serial.println(ssid);
  WiFi.beginNetwork((char *)ssid, (char *)password);

  while (WiFi.localIP() == INADDR_NONE) {
    Serial.print(".");
    delay(300);
  }

  Serial.println();
  Serial.print("Access Point IP: ");
  Serial.println(WiFi.localIP());

  tcpServer.begin();
  Serial.println("TCP Server started on port 8080");
}

void loop() {
  handleWiFiLED();
  acceptNewTCPClient();
  handleTCPInput();        // From TCP client → send to C2000 via SPI
  handleC2000Response();   // From C2000 → send to TCP client
  delay(10);
}

// === Blinking LED to indicate client activity ===
void handleWiFiLED() {
  static int ledState = LOW;

  if (WiFi.getTotalDevices() > 0) {
    unsigned long now = millis();
    if (now - lastBlinkTime >= blinkInterval) {
      lastBlinkTime = now;
      digitalWrite(RED_LED, LOW);
      digitalWrite(GREEN_LED, LOW);

      currentLED = (currentLED + 1) % 2;
      digitalWrite(currentLED == 0 ? RED_LED : GREEN_LED, HIGH);
    }
  } else {
    digitalWrite(RED_LED, LOW);
    digitalWrite(GREEN_LED, LOW);
  }
}

// === Accept new TCP client if needed ===
void acceptNewTCPClient() {
  WiFiClient newClient = tcpServer.available();
  if (newClient) {
    if (!tcpClient || !tcpClient.connected()) {
      tcpClient = newClient;
      Serial.println("New TCP client connected");
    } else {
      newClient.stop(); // Only handle one client at a time
    }
  }
}

// === Handle TCP command from client → Send to C2000 ===
void handleTCPInput() {
  while (tcpClient && tcpClient.connected() && tcpClient.available()) {
    char ch = tcpClient.read();

    if (ch == STX) {
      receivingTCP = true;
      tcpBuffer = "";
    } else if (ch == ETX && receivingTCP) {
      receivingTCP = false;
      Serial.print("TCP -> SPI: ");
      Serial.println(tcpBuffer);
      sendToC2000(tcpBuffer);
    } else if (receivingTCP) {
      tcpBuffer += ch;
    }
  }
}

// === Send command to C2000 over SPI ===
void sendToC2000(const String &msg) {
  digitalWrite(SPI_CS_PIN, LOW);
  SPI.transfer(STX);
  for (int i = 0; i < msg.length(); i++) {
    SPI.transfer(msg[i]);
  }
  SPI.transfer(ETX);
  digitalWrite(SPI_CS_PIN, HIGH);
}

// === Receive message from C2000 and forward to TCP client ===
void handleC2000Response() {
  String response = "";
  bool receiving = false;

  digitalWrite(SPI_CS_PIN, LOW);
  for (int i = 0; i < 64; i++) {
    byte b = SPI.transfer(0x00);
    if (b == STX) {
      receiving = true;
      response = "";
    } else if (b == ETX && receiving) {
      break;
    } else if (receiving) {
      response += (char)b;
    }
  }
  digitalWrite(SPI_CS_PIN, HIGH);

  if (response.length() > 0) {
    Serial.print("C2000 -> TCP: ");
    Serial.println(response);
    sendToTCPClient(response);
  }
}

// === Send message to TCP client ===
void sendToTCPClient(const String &msg) {
  if (tcpClient && tcpClient.connected()) {
    tcpClient.write(STX);
    tcpClient.print(msg);
    tcpClient.write(ETX);
  }
}
